---
layout:     post
title:      "NK-PA-NEMU Summary"
subtitle:   "NEMU"
date:       2019-05-15
author:     "Dylan"
header-img: "img/post-bg-unix-linux.jpg"
catalog: true
tags:
    - PA
    - Summary
---




## 前言

NEMU代码注解



### 链接 

[NK-PA Summary: NEMU](https://blovetree.github.io/2019/05/15/NK-PA-NEMU/)

[NK-PA Summary: NEXUS-AM](https://blovetree.github.io/2019/05/15/NK-PA-NEXUS-AM/)

[NK-PA Summary: NANOS-LITE](https://blovetree.github.io/2019/05/15/NK-PA-NANOS-LITE/)

[NK-PA Summary: NAVY-APPS](https://blovetree.github.io/2019/05/15/NK-PA-NAVY-APPS/)




## include/



### commen.h

> 定义了一些类型

```
typedef uint8_t bool;
typedef uint32_t rtlreg_t;
typedef uint32_t paddr_t;
typedef uint32_t vaddr_t;
typedef uint16_t ioaddr_t;

#define false 0
#define true 1
```



### commen.h

> 定义了一些宏

```
#define Log_write(format, ...)
#define Log(format, ...)
#define Assert(cond, ...)
#define panic(format, ...)
#define TODO()
```

- Log()是 printf()的升级版,专门用来输出调试信息,同时还会输出使用 Log()所在的源文件,行号和函 数.当输出的调试信息过多的时候,可以很方便地定位到代码中的相关位置

- Assert()是 assert()的升级版,当测试条件为假时,在 assertion fail 之前可以输出一些信息 

- panic()用于输出信息并结束程序,相当于无条件的 assertion fail



### macro.h

> 定义了一些宏

转为字符串：在对它所引用的宏变量通过替换后在其左右各加上一个双引号

```
#define str_temp(x) #x
#define str(x) str_temp(x)
```

用来将两个宏参数连接为一个宏参数，##被称为连接符

```
#define concat_temp(x, y) x ## y
#define concat(x, y) concat_temp(x, y)
#define concat3(x, y, z) concat(concat(x, y), z)
#define concat4(x, y, z, w) concat3(concat(x, y), z, w)
#define concat5(x, y, z, v, w) concat4(concat(x, y), z, v, w)
```



### cpu/


#### decode.h

struct Operand | 描述
- | -
type | 操作数的类型
width | 操作数的宽度
reg | 操作数指向的寄存器
addr | 操作数指向的地址
imm | 操作数立即数值
simm | 操作数符号扩展立即数值
val | 操作数值
str | 操作数字符串

---

struct DecodeInfo | 描述
- | -
opcode | 操作码
seq_eip | 逻辑eip
is_operand_size_16 | 操作数宽度标志
ext_opcode | 扩展操作码
is_jmp | 跳转标志
jmp_eip | 跳转地址
src、dest、src2 | 操作数

---

struct ModR_M | 描述
- | -
R_M | RM段
reg | reg段
mod | mod段
opcode | 扩展操作码段
val | ModR_M值

> 建议看i386手册

---

struct SIB | 描述
- | -
base | base段
index | index段
ss | ss段
val | SIB值

> 建议看i386手册

---

函数，宏 | 描述
- | -
load_addr | 解析操作数指向的内存地址
read_ModR_M | 解析\r字段
operand_write | 操作数回写
id_src | 返回源操作数1
id_src2 | 返回源操作数2
id_dest | 返回目的操作数

宏make_DHelper

- make_DHelper是针对decode函数名的连接函数，用来生成decode函数族

- 之后定义decode函数族的函数指针DHelper

`typedef void (*DHelper) (vaddr_t *);`

decode函数族

- 针对不同指令的译码函数


#### exec.h

函数 | 描述
- | -
instr_fetch | 返回从eip处读的内容

宏make_EHelper

- make_EHelper是针对exec函数名的连接函数，用来生成exec函数族

- 之后定义exec函数族的函数指针EHelper

`typedef void (*EHelper) (vaddr_t *);`


#### reg.h

struct DecodeInfo | 描述
- | -
gpr[8]、eax…… | 通用寄存器
eip | 保存指令执行位置
eflags | 标志位寄存器
idt | 保存中断向量表位置和长度
crx | 控制寄存器
cs | 保存段基址
INTR | 中断引脚

---

宏 | 描述
- | -
reg_l | 获取对应32位寄存器的值
reg_w | 获取对应16位寄存器的值
reg_b | 获取对应8位寄存器的值
reg_name | 返回寄存器名


#### rtl.h

宏 | 描述
- | -
make_rtl_arith_logic | 生成RTL基本指令函数
make_rtl_setget_eflags | 生成RTL读写标志寄存器的函数
rtl_x函数族 | 生成RTL伪指令函数



### device/


#### mmio.h

函数指针mmio_callback_t

- 对应于设备定义的回调函数，用以更新设备状态。

`typedef void(*mmio_callback_t)(paddr_t, int, bool);`

---

函数 | 描述
- | -
add_mmio_map | 内存映射I/O注册，返回映射的首地址
is_mmio | 检查地址是否处于内存映射I/O地址空间
mmio_read | 依据序号和地址进行I/O读
mmio_write | 依据序号和地址进行I/O写


#### port-io.h

函数指针pio_callback_t

- 对应于设备定义的回调函数，用以更新设备状态。

`typedef void(*pio_callback_t)(ioaddr_t, int, bool);`

---

函数 | 描述
- | -
add_pio_map | 端口映射I/O注册，返回映射的首地址
pio_read | 依据端口号和地址进行I/O读
pio_write | 依据端口号和地址进行I/O写



### memory/


#### memory.h

函数 | 描述
- | -
vaddr_read | 依据虚拟地址读
paddr_read | 依据物理地址读
vaddr_write | 依据虚拟地址写
paddr_write | 依据物理地址写

---

宏 | 描述
- | -
guest_to_host | nemu的物理地址转换成pmem中的地址
host_to_guest | pmem中的地址转换成nemu的物理地址

>又是一层虚拟内存地址转换，:smile:


#### mmu.h

定义了页表PT

'typedef PTE (*PT) [NR_PTE];'

定义了一些变量

```
#define PAGE_SIZE					4096
#define NR_PDE						1024
#define NR_PTE						1024
#define PAGE_MASK					(4096 - 1)
#define PT_SIZE						((NR_PTE) * (PAGE_SIZE))
```

---

结构体 | 描述
- | -
CR0 | cr0寄存器结构体
CR3 | cr0寄存器结构体
PDE | 页目录项结构体
PTE | 页表项结构体
GateDesc | 中断要用的门描述符，构成中断描述符表idt，用于raise_intr函数



### monitor/


#### expr.h

函数 | 描述
- | -
expr | 表达式处理函数


#### monitor.h

枚举变量，指示NEMU的运行状态

`enum { NEMU_STOP, NEMU_RUNNING, NEMU_END };`


#### watchpoint.h

struct watchpoint | 描述
- | -
NO | 监视点序号
next | 指向下一个监视点
expr | 监视对象
val | 监视对象的值




## src/


#### main.c

nemu的运行，就是调用ui_mainloop(is_batch_mode)


### cpu/


#### intr.c

实现中断函数

列表 | 描述
- | -
raise_intr | 中断处理，保存现场，调用处理函数
dev_raise_intr | 设置cpu中断信号，现在只有时间中断

#### reg.c

定义处理器状态变量

`CPU_state cpu;`

定义寄存器名字数组

```
const char *regsl[] = {"eax", "ecx", "edx", "ebx", "esp", "ebp", "esi", "edi"};
const char *regsw[] = {"ax", "cx", "dx", "bx", "sp", "bp", "si", "di"};
const char *regsb[] = {"al", "cl", "dl", "bl", "ah", "ch", "dh", "bh"};
```

实现寄存器测试函数reg_test



### cpu/decode/


#### decode.c

定义处理器译码信息和临时寄存器

```
DecodeInfo decoding;
rtlreg_t t0, t1, t2, t3;
const rtlreg_t tzero = 0;
```

实现decode函数族

实现decode_op_rm函数解析rm字段，方法是调用read_ModR_M

实现操作数回写函数operand_write

宏make_DopHelper

- make_DopHelper是针对具体译码的函数名的连接函数，用来生成decode_op函数族

- 之后定义exec函数族的函数指针EHelper

`typedef void (*EHelper) (vaddr_t *);`

decode_op函数族

- 针对不同译码函数的进一步译码实现


#### modrm.c

实现decode.h中声明的load_addr和read_ModR_M



### cpu/exec/


#### all-instr.h

声明了各种指令实现函数，定义在exec下其他文件中，可见下


#### exec.c

定义了一些宏，来填写opcode_table

```
#define IDEXW(id, ex, w)   {concat(decode_, id), concat(exec_, ex), w}
#define IDEX(id, ex)       IDEXW(id, ex, 0)
#define EXW(ex, w)         {NULL, concat(exec_, ex), w}
#define EX(ex)             EXW(ex, 0)
#define EMPTY              EX(inv)
```

---

struct opcode_entry | 描述
- | -
decode | 指令译码函数
execute | 指令执行函数
width | 操作数宽度

---

函数 | 描述
- | -
set_width | 设置操作数宽度
idex | 根据实际情况，调用指令译码和执行函数
exec_2byte_esc | 对应于两个字节的操作数的指令执行函数，与exec_real的唯一不同是查第二张表
exec_real | 指令执行函数
update_eip | 更新eip
exec_wrapper | cpu运行函数，每次执行一条指令

宏make_group

- 定义gp1-gp7组，对应手册中指令部分的组的划分，通过扩展操作码定位组内元素

```
#define make_group(name, item0, item1, item2, item3, item4, item5, item6, item7) \
  static opcode_entry concat(opcode_table_, name) [8] = { \
    /* 0x00 */	item0, item1, item2, item3, \
    /* 0x04 */	item4, item5, item6, item7  \
  }; \
  static make_EHelper(name) { \
  idex(eip, &concat(opcode_table_, name)[decoding.ext_opcode]); \
}
```

数组opcode_table

- 存放指令应执行的译码、执行函数。通过操作数定位，见i386手册附录A



#### arith.c、control.c、data-mov.c、logic.c、prefix.c、special.c、system.c

实现各种指令的执行函数

#### cc.c

实现函数rtl_setcc，根据操作数的[4:1]位决定读什么标志位，以及[0]位决定是否对结果最后一位取反，(所以jcc跳转用了opcode_table的一行)，对应与不同的跳转条件



### device/


<!--#### device.c

-->
#### keyboard.c

通过宏定义了按键的名字和事件名

```
#define _KEYS(_) \
  _(ESCAPE) _(F1) _(F2) _(F3) _(F4) _(F5) _(F6) _(F7) _(F8) _(F9) _(F10) _(F11) _(F12) \
_(GRAVE) _(1) _(2) _(3) _(4) _(5) _(6) _(7) _(8) _(9) _(0) _(MINUS) _(EQUALS) _(BACKSPACE) \
_(TAB) _(Q) _(W) _(E) _(R) _(T) _(Y) _(U) _(I) _(O) _(P) _(LEFTBRACKET) _(RIGHTBRACKET) _(BACKSLASH) \
_(CAPSLOCK) _(A) _(S) _(D) _(F) _(G) _(H) _(J) _(K) _(L) _(SEMICOLON) _(APOSTROPHE) _(RETURN) \
_(LSHIFT) _(Z) _(X) _(C) _(V) _(B) _(N) _(M) _(COMMA) _(PERIOD) _(SLASH) _(RSHIFT) \
_(LCTRL) _(APPLICATION) _(LALT) _(SPACE) _(RALT) _(RCTRL) \
_(UP) _(DOWN) _(LEFT) _(RIGHT) _(INSERT) _(DELETE) _(HOME) _(END) _(PAGEUP) _(PAGEDOWN)

#define _KEY_NAME(k) _KEY_##k,

enum {
  _KEY_NONE = 0,
  _KEYS(_KEY_NAME)
};
```

<!--#### serial.c


#### timer.c

-->
#### vga.c

定义了屏幕大小
```
#define SCREEN_H 300
#define SCREEN_W 400
```



### device/io/


#### mmio.c

定义MMIO_t结构体记录内存映射I/O的注册信息。

定义变量，实现内存映射

```
#define MMIO_SPACE_MAX (512 * 1024)
#define NR_MAP 8

static uint8_t mmio_space_pool[MMIO_SPACE_MAX];
static uint32_t mmio_space_free_index = 0;
static MMIO_t maps[NR_MAP];
static int nr_map = 0;
```

实现mmio.h中声明的函数

#### port-io.c

定义PIO_t结构体记录端口映射I/O的注册信息。

定义变量，实现内存映射

```
#define PORT_IO_SPACE_MAX 65536
#define NR_MAP 8

/* "+ 3" is for hacking, see pio_read() below */
static uint8_t pio_space[PORT_IO_SPACE_MAX + 3];
static PIO_t maps[NR_MAP];
static int nr_map = 0;
```

实现port-io.h中声明的函数



### memory/


#### memory.c

定义内存及大小

```
#define PMEM_SIZE (128 * 1024 * 1024)
uint8_t pmem[PMEM_SIZE];
```

定义访存函数

```
#define pmem_rw(addr, type) *(type *)({\
    Assert(addr < PMEM_SIZE, "physical address(0x%08x) is out of bound", addr); \
    guest_to_host(addr); \
    })
```

定义page_translate函数，虚拟地址到物理地址的转换

实现memory.h中声明的函数



### monitor/


#### monitor.c

变量 | 描述
- | -
ENTRY_START | 程序镜像加载首地址，也是程序入口
img_file | 程序镜像
is_batch_mode | 是否为批处理程序的标志

---

函数 | 描述
- | -
welcome | 欢迎函数
load_default_img | 加载默认镜像(一段简易代码)
load_img | 加载程序镜像，需要提前设定img_file，否则加载默认镜像
restart | 初始化cpu
parse_args | 解析命令行参数
init_monitor | 初始化函数


#### cpu-exec.c

定义变量nemu_state，操控nemu的运行状态

实现cpu运行函数cpu_exec，每执行一条指令检查一下nemu运行状态，以及更新设备输出



### monitor/debug/


#### expr.c

struct rule | 描述
- | -
regex | 正则表达式匹配的字符串
token_type | 匹配字符串对应的token类型
op_pri | token的优先级

- rules数组定义了使用的正则表达式匹配规则

---

struct token | 描述
- | -
type | token类型
str | token的字符串
value | token的值
op_pri | token的优先级
isSymbol | 符号判断
isNumber | 数字判断

- tokens数组定义了识别出的token
- nr_token变量计数识别出的token

---

函数 | 描述
- | -
strToInt | 将10、16进制的字符串数转换成10进制int数
make_token | 识别token
check_parentheses | 检查表达式括号
eval | 进一步计算表达式值
expr | 分化计算表达式值


#### ui.c

>实现调试器，格式如下表

![img](/img/in-post/post-pa-nemu-1.jpg)

---

数组cmd_table记录了调试选项信息

---

函数 | 描述
- | -
cmd_c | 执行
cmd_q | 退出
cmd_si | 执行若干步，NEMU进入停止态
cmd_info | 打印寄存器/监视点信息
cmd_p | 计算表达式
cmd_x | 打印内存
cmd_w | 设置监视点
cmd_d | 删除监视点
cmd_help | help命令
ui_mainloop | 解析命令，查找cmd_table，由调试信息调用功能函数


#### watchpoint.c

定义变量实现监视点

```
#define NR_WP 32

static WP wp_pool[NR_WP];
static WP *head, *free_;
```

---

函数 | 描述
- | -
init_wp_pool | 初始化监视点列表
new_wp | 申请监视点
free_wp | 注销监视点
wp_watch | 检查监视点值
wp_info | 打印监视点信息



### monitor/diff-test/

> 这里主要实现diff-test.c的difftest_step：cpu每执行一条指令后用此函数检查寄存器状态。  


---
