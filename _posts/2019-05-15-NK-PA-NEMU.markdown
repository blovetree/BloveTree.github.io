---
layout:     post
title:      "NK-PA Summary"
subtitle:   "NEMU"
date:       2019-05-15
author:     "Dylan"
header-img: "img/post-bg-unix-linux.jpg"
catalog: true
tags:
    - PA
    - NEMU
---




## 前言

NEMU代码注解



### 链接 

[NK-PA Summary: NEMU](https://blovetree.github.io/2019/05/15/NK-PA-NEMU/)

[NK-PA Summary: NEXUS-AM](https://blovetree.github.io/2019/05/15/NK-PA-NEXUS-AM/)

[NK-PA Summary: NANOS-LITE](https://blovetree.github.io/2019/05/15/NK-PA-NANOS-LITE/)

[NK-PA Summary: NAVY-APPS](https://blovetree.github.io/2019/05/15/NK-PA-NAVY-APPS/)


## include/



### commen.h

> 定义了一些类型

```
typedef uint8_t bool;
typedef uint32_t rtlreg_t;
typedef uint32_t paddr_t;
typedef uint32_t vaddr_t;
typedef uint16_t ioaddr_t;

#define false 0
#define true 1
```



### commen.h

> 定义了一些宏

```
#define Log_write(format, ...)
#define Log(format, ...)
#define Assert(cond, ...)
#define panic(format, ...)
#define TODO()
```

- Log()是 printf()的升级版,专门用来输出调试信息,同时还会输出使用 Log()所在的源文件,行号和函 数.当输出的调试信息过多的时候,可以很方便地定位到代码中的相关位置

- Assert()是 assert()的升级版,当测试条件为假时,在 assertion fail 之前可以输出一些信息 

- panic()用于输出信息并结束程序,相当于无条件的 assertion fail



### macro.h

> 定义了一些宏

转为字符串：在对它所引用的宏变量通过替换后在其左右各加上一个双引号

```
#define str_temp(x) #x
#define str(x) str_temp(x)
```

用来将两个宏参数连接为一个宏参数，##被称为连接符

```
#define concat_temp(x, y) x ## y
#define concat(x, y) concat_temp(x, y)
#define concat3(x, y, z) concat(concat(x, y), z)
#define concat4(x, y, z, w) concat3(concat(x, y), z, w)
#define concat5(x, y, z, v, w) concat4(concat(x, y), z, v, w)
```



### cpu/


#### decode.h

##### struct Operand

成员 | 描述
- | -
type | 操作数的类型
width | 操作数的宽度
reg | 操作数指向的寄存器
addr | 操作数指向的地址
imm | 操作数立即数值
simm | 操作数符号扩展立即数值
val | 操作数值
str | 操作数字符串

##### struct DecodeInfo

成员 | 描述
- | -
opcode | 操作码
seq_eip | 逻辑eip
is_operand_size_16 | 操作数宽度标志
ext_opcode | 扩展操作码
is_jmp | 跳转标志
jmp_eip | 跳转地址
src、dest、src2 | 操作数

##### struct ModR_M

> 建议看i386手册

成员 | 描述
- | -
R_M | RM段
reg | reg段
mod | mod段
opcode | 扩展操作码段
val | ModR_M值

##### struct SIB

> 建议看i386手册

成员 | 描述
- | -
base | base段
index | index段
ss | ss段
val | SIB值

##### 函数 | 宏

列表 | 描述
- | -
load_addr | 解析操作数指向的内存地址
read_ModR_M | 解析\r字段
operand_write | 操作数回写
id_src | 返回源操作数1
id_src2 | 返回源操作数2
id_dest | 返回目的操作数

##### 宏make_DHelper

make_DHelper是针对decode函数名的连接函数，用来生成decode函数族

之后定义decode函数族的函数指针DHelper

`typedef void (*DHelper) (vaddr_t *);`


#### exec.h

##### 函数 | 宏

列表 | 描述
- | -
instr_fetch | 返回从eip处读的内容

##### 宏make_EHelper

make_EHelper是针对exec函数名的连接函数，用来生成exec函数族

之后定义exec函数族的函数指针EHelper

`typedef void (*EHelper) (vaddr_t *);`


#### reg.h

##### struct DecodeInfo

成员 | 描述
- | -
gpr[8]、eax…… | 通用寄存器
eip | 保存指令执行位置
eflags | 标志位寄存器
idt | 保存中断向量表位置和长度
crx | 控制寄存器
cs | 保存段基址
INTR | 中断引脚

##### 函数 | 宏

列表 | 描述
- | -
reg_l | 获取对应32位寄存器的值
reg_w | 获取对应16位寄存器的值
reg_b | 获取对应8位寄存器的值
reg_name | 返回寄存器名


#### rtl.h

##### 函数 | 宏

列表 | 描述
- | -
make_rtl_arith_logic | 生成RTL基本指令函数
make_rtl_setget_eflags | 生成RTL读写标志寄存器的函数
rtl_x函数族 | 生成RTL伪指令函数



### device/


#### mmio.h

##### 函数指针mmio_callback_t

对应于设备定义的回调函数，用以更新设备状态。

`typedef void(*mmio_callback_t)(paddr_t, int, bool);`

##### 函数 | 宏

列表 | 描述
- | -
add_mmio_map | 内存映射I/O注册，返回映射的首地址
is_mmio | 检查地址是否处于内存映射I/O地址空间
mmio_read | 依据序号和地址进行I/O读
mmio_write | 依据序号和地址进行I/O写


#### port-io.h

##### 函数指针pio_callback_t

对应于设备定义的回调函数，用以更新设备状态。

`typedef void(*pio_callback_t)(ioaddr_t, int, bool);`

##### 函数 | 宏

列表 | 描述
- | -
add_pio_map | 端口映射I/O注册，返回映射的首地址
pio_read | 依据端口号和地址进行I/O读
pio_write | 依据端口号和地址进行I/O写



### memory/


#### memory.h

##### 函数 | 宏

列表 | 描述
- | -
vaddr_read | 依据虚拟地址读
paddr_read | 依据物理地址读
vaddr_write | 依据虚拟地址写
paddr_write | 依据物理地址写

列表 | 描述
- | -
guest_to_host | nemu的物理地址转换成pmem中的地址
host_to_guest | pmem中的地址转换成nemu的物理地址

>又是一层虚拟内存地址转换，:smile:


#### mmu.h

定义了页表PT

'typedef PTE (*PT) [NR_PTE];'

##### 变量

```
#define PAGE_SIZE					4096
#define NR_PDE						1024
#define NR_PTE						1024
#define PAGE_MASK					(4096 - 1)
#define PT_SIZE						((NR_PTE) * (PAGE_SIZE))
```

##### 结构体

列表 | 描述
- | -
CR0 | cr0寄存器结构体
CR3 | cr0寄存器结构体
PDE | 页目录项结构体
PTE | 页表项结构体
GateDesc | 中断要用的门描述符，构成中断描述符表idt，用于raise_intr函数



### monitor/


#### expr.h

##### 函数 | 宏

列表 | 描述
- | -
expr | 表达式处理函数


#### monitor.h

枚举变量，指示NEMU的运行状态

`enum { NEMU_STOP, NEMU_RUNNING, NEMU_END };`


#### watchpoint.h

##### struct watchpoint

成员 | 描述
- | -
NO | 监视点序号
next | 指向下一个监视点
expr | 监视对象
val | 监视对象的值

